var httpClient = new HttpClient
{
    Timeout = TimeSpan.FromMinutes(5)
};

var authProvider = new DelegateAuthenticationProvider(requestMessage =>
{
    requestMessage.Headers.Authorization = new AuthenticationHeaderValue("Bearer", graphToken);
    return Task.FromResult(0);
});

// âœ… Usa o seu HttpClient com timeout aqui
var httpProvider = new TimeoutHttpProvider(httpClient, disposeHandler: false);

var graphClient = new GraphServiceClient(authProvider, httpProvider);











using Microsoft.Graph;
using System.Net.Http;

public class TimeoutHttpProvider : HttpProvider
{
    public TimeoutHttpProvider(HttpClient httpClient, bool disposeHandler)
        : base(new CustomHttpMessageHandler(httpClient), disposeHandler)
    {
    }

    private class CustomHttpMessageHandler : HttpMessageHandler
    {
        private readonly HttpClient _httpClient;

        public CustomHttpMessageHandler(HttpClient httpClient)
        {
            _httpClient = httpClient;
        }

        protected override async Task<HttpResponseMessage> SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
        {
            return await _httpClient.SendAsync(request, cancellationToken);
        }
    }
}
